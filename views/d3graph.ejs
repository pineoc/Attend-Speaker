<html>
<meta charset="utf-8">
<style>

    body {
        font: 10px sans-serif;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .x.axis path {
        display: none;
    }

    .pitch-line {
        fill: none;
        stroke: steelblue;
        stroke-width: 1.5px;
    }

    .intensity-line {
        fill: none;
        stroke: red;
        stroke-width: 1.5px;
    }

</style>
<body>
<script src="//d3js.org/d3.v3.min.js"></script>
<script>

    var margin = {top: 20, right: 20, bottom: 30, left: 50},
            width = window.innerWidth * 0.8 - margin.left - margin.right,
            height = window.innerHeight * 0.8 - margin.top - margin.bottom;

    var formatDate = d3.time.format("%L");

    var x = d3.time.scale()
            .range([0, width]);

    var y = d3.scale.linear()
            .range([height, 0]);

    var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom");

    var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left");

    var pitchLine = d3.svg.line()
            .x(function(d) { return x(d.time); })
            .y(function(d) { return y(d.pitch); });

    var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    //pitch data test

    d3.tsv("test-p.out", type, function(error, data) {
        if (error) throw error;

        x.domain(d3.extent(data, function(d) { return d.time; }));
        y.domain(d3.extent(data, function(d) { return d.pitch; }));

        svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);

        svg.append("g")
                .attr("class", "y axis")
                .call(yAxis)
                .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("Price ($)");

        svg.append("path")
                .datum(data)
                .attr("class", "pitch-line")
                .attr("d", pitchLine);
    });

    function type(d) {
        d.time = d.time * 1000;
        if(d.pitch == "--undefined--"){
            d.pitch = 0.0;
        }
        else
            d.pitch = +d.pitch;
        return d;
    }


    //intensity test
    var intensityLine = d3.svg.line()
            .x(function(d) { return x(d.time); })
            .y(function(d) { return y(d.intensity); });

    d3.tsv("test-i.out", type_int, function(error, data) {
        if (error) throw error;

        x.domain(d3.extent(data, function(d) { return d.time; }));
        y.domain(d3.extent(data, function(d) { return d.intensity; }));

        svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);

        svg.append("g")
                .attr("class", "y axis")
                .call(yAxis)
                .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("Price ($)");

        svg.append("path")
                .datum(data)
                .attr("class", "intensity-line")
                .attr("d", intensityLine);
    });

    function type_int(d) {
        d.time = d.time * 1000;
        if(d.intensity == "--undefined--"){
            d.intensity = 0.0;
        }
        else
            d.intensity = +d.intensity;
        return d;
    }

    //formant graph
    var color = d3.scale.category10();

    var formant_line = d3.svg.line()
            .interpolate("basis")
            .x(function(d) { return x(d.time); })
            .y(function(d) { return y(d.func); });

    d3.tsv("test-f.out", function(error, data) {
        if (error) throw error;

        color.domain(d3.keys(data[0]).filter(function(key) { return key !== "time"; }));

        data.forEach(function(d) {
            d.time = d.time;
        });

        var funcs = color.domain().map(function(name) {
            return {
                name: name,
                values: data.map(function(d) {
                    return {date: d.time, temperature: +d[name]};
                })
            };
        });

        x.domain(d3.extent(data, function(d) { return d.time; }));

        y.domain([
            d3.min(funcs, function(c) { return d3.min(c.values, function(v) { return v.func; }); }),
            d3.max(funcs, function(c) { return d3.max(c.values, function(v) { return v.func; }); })
        ]);

        svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);

        svg.append("g")
                .attr("class", "y axis")
                .call(yAxis)
                .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("functions");

        var func = svg.selectAll(".func")
                .data(funcs)
                .enter().append("g")
                .attr("class", "func");

        func.append("path")
                .attr("class", "line")
                .attr("d", function(d) { return formant_line(d.values); })
                .style("stroke", function(d) { return color(d.name); });

        func.append("text")
                .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
                .attr("transform", function(d) { return "translate(" + x(d.value.time) + "," + y(d.value.func) + ")"; })
                .attr("x", 3)
                .attr("dy", ".35em")
                .text(function(d) { return d.name; });
    });

</script>
